{
    "paper_id": "efcfbaace6df1f5383c167fe24ecfd918b77f8b4",
    "metadata": {
        "title": "TAR-VIR: a pipeline for TARgeted VIRal strain reconstruction from metagenomic data",
        "authors": [
            {
                "first": "Jiao",
                "middle": [],
                "last": "Chen",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "City University of Hong Kong",
                    "location": {
                        "settlement": "Hong Kong",
                        "country": "China SAR"
                    }
                },
                "email": ""
            },
            {
                "first": "Jiating",
                "middle": [],
                "last": "Huang",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "City University of Hong Kong",
                    "location": {
                        "settlement": "Hong Kong",
                        "country": "China SAR"
                    }
                },
                "email": ""
            },
            {
                "first": "Yanni",
                "middle": [],
                "last": "Sun",
                "suffix": "",
                "affiliation": {
                    "laboratory": "",
                    "institution": "City University of Hong Kong",
                    "location": {
                        "settlement": "Hong Kong",
                        "country": "China SAR"
                    }
                },
                "email": ""
            }
        ]
    },
    "abstract": [],
    "body_text": [
        {
            "text": "To evaluate the similarity between different microbes, we calculated the sizes of LCSs between human viruses and other microbial genomes. As bacteria infect humans as well as viruses, the sizes of LCSs between human viruses, human vs. non-human viruses, and human viruses vs. bacteria were calculated. The virus reference genomes were downloaded from NCBI Viruses (https://www.ncbi.nlm.nih.gov/genome/viruses/). To date (June 2018), there are in total 7,456 complete viral genomes, of which 481 have human as the natural host (denote as human viruses). The human bacterial reference genomes were downloaded from Human Microbiome Project (HMP) on NCBI. In total, 2,314 bacterial reference genomes were downloaded.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Sizes of common regions between human viruses and other microbial species"
        },
        {
            "text": "As there is a large number of microbial species available, we conducted LCS search for available microbial genomes by constructing generalized suffix array and the corresponding longest common prefix (LCP) array (Gusfield, 1997) . First, we build a generalized SA (Rajasekaran and Nicolae, 2014) . Then, the LCP array, which contains LCPs between each two adjacent suffixes, can be calculated in linear time (Kasai et al., 2001; K\u00e4rkk\u00e4inen and Sanders, 2003) . By definition, the LCS for each two sequences is the maximum LCP between all pairs of suffixes from the two sequences. The following lemma is employed in order to avoid checking all the LCP values between two sequences. The results of the LCS histograms are shown in Figure S1 (A-C). One may also examine whether the read recruitment process can incur contamination by using simulated or real sequencing data. However, the empirical studies using real data are limited to the viruses in the samples. Meanwhile, producing simulated sequencing data for all microbes is not practical. Using suffix-array based LCS computation allows us to obtain a more comprehensive view of the common regions between different microbes.",
            "cite_spans": [
                {
                    "start": 212,
                    "end": 228,
                    "text": "(Gusfield, 1997)",
                    "ref_id": "BIBREF1"
                },
                {
                    "start": 264,
                    "end": 295,
                    "text": "(Rajasekaran and Nicolae, 2014)",
                    "ref_id": "BIBREF4"
                },
                {
                    "start": 408,
                    "end": 428,
                    "text": "(Kasai et al., 2001;",
                    "ref_id": "BIBREF3"
                },
                {
                    "start": 429,
                    "end": 458,
                    "text": "K\u00e4rkk\u00e4inen and Sanders, 2003)",
                    "ref_id": "BIBREF2"
                }
            ],
            "ref_spans": [
                {
                    "start": 728,
                    "end": 737,
                    "text": "Figure S1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Sizes of common regions between human viruses and other microbial species"
        },
        {
            "text": "We also compared the sizes of the LCSs between different microbes with the ones within a viral population. As the characterized haplotypes for different RNA viruses are very limited, instead of computing the LCS using available data, we estimated the LCSs within a quasispecies using a probability model and dynamic programming (Chen et al., 2018) . With the mutation rate of 3e-5 at each base during virus replication, the probability distribution of LCS length between two HIV strains that are n generations apart were calculated and the distribution of LCS probabilities is shown in Figure S1 (D). and non-human viruses (B), and between human viruses and bacteria (C). The x-axis is the log10 of the LCS length. The y-axis is the number of pairs within the given range of LCS size. Only LCSs that are longer than 10 bp are presented. (D) Probability distribution for LCSs between two simulated HIV strains that are 50, 100, 200, and 500 generations apart. The x-axis is the length of LCS, with a range from 0 to 10,000 bp. The y-axis is the corresponding probabilities for those LCS sizes.",
            "cite_spans": [
                {
                    "start": 328,
                    "end": 347,
                    "text": "(Chen et al., 2018)",
                    "ref_id": "BIBREF0"
                }
            ],
            "ref_spans": [
                {
                    "start": 586,
                    "end": 595,
                    "text": "Figure S1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Sizes of common regions between human viruses and other microbial species"
        },
        {
            "text": "To gain guidance on appropriate overlap cutoffs for extension, the ROC curve for LCS thresholds is plotted in Figure S2 . As there are 142,021,586 pairs of virus-vs-other sequences, near zero FPR (false positive rate) values are generated for many LCS cutoffs. Thus we also presented the actual number of virus-vs-other sequence pairs with LCS above a given cutoff in Figure S3 . For each LCS cutoff, the corresponding TPR (true positive rate) and the number of false positive pairs are illustrated using two axes. To compute the TPR and FPR, we define a positive case as two sequences from the same quasispecies. The negative case refers to a pair of genomes from two different species. Thus, given an LCS cutoff, the FPR can be computed as the percentage of negative cases with LCS above the cutoff in all 142,021,586 examined pairs. The TRP measures the percentage of positive cases with LCS above the cutoff, which can be computed by sampling the distribution in Figure S1 (D). In Figure S1 (D), we have several distributions with different number of generations of replication. We generated 10 6 positive samples using the distribution with 100 generations. If one replication takes about 24 hours, this curve mimics the infection of about 3 months.",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 110,
                    "end": 119,
                    "text": "Figure S2",
                    "ref_id": "FIGREF1"
                },
                {
                    "start": 368,
                    "end": 377,
                    "text": "Figure S3",
                    "ref_id": "FIGREF3"
                },
                {
                    "start": 967,
                    "end": 976,
                    "text": "Figure S1",
                    "ref_id": "FIGREF0"
                },
                {
                    "start": 985,
                    "end": 994,
                    "text": "Figure S1",
                    "ref_id": "FIGREF0"
                }
            ],
            "section": "Sizes of common regions between human viruses and other microbial species"
        },
        {
            "text": "The AUC for the ROC curve is 0.999, which means sequences from different viral haplotypes in a quasispecies have different LCSs (larger) from sequences of different species. From Figure S3 , when the overlap cutoff is between 100 bp to 500 bp, the FPR is close to 0 and TPR is close to 1. Users can choose overlap cutoff within this range but less than the read size. Taking into account the contamination from chimeric reads and the read size, an overlap threshold between 130 to 249 is advised. The actual cutoff still needs to be tested because different data sets have different coverage. For our experiments, the default cutoff is 150 for all MiSeq reads of 250 bp. 10 -9 10 -8 10 -7 10 -6 10 -5 10 -4 10 -3 10 -2 10 -1 10 0 False positive rate ",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 179,
                    "end": 188,
                    "text": "Figure S3",
                    "ref_id": "FIGREF3"
                }
            ],
            "section": "Sizes of common regions between human viruses and other microbial species"
        },
        {
            "text": "Algorithm 1 Default mode: create BWT for all reads Input: seed read set R 0 , the input text T, the overlap threshold \u03c4 Output: Reads that are sequenced from the targeted viruses 1: output \u2190 R 0 2: R \u2190 R 0 3: Create BWT and RID for T : BW T (T ), RID(T ) 4: while R not empty do 5: Backward search on BW T (T ) to find all reads that overlap with reads in R 6:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pseudocode for iterative search"
        },
        {
            "text": "Save them to set R 7:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pseudocode for iterative search"
        },
        {
            "text": "output \u2190 output \u222aR 8:",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pseudocode for iterative search"
        },
        {
            "text": "R \u2190 R 9: return output",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Pseudocode for iterative search"
        },
        {
            "text": "The assembly results on SARS-Cov aligned and recruited reads are shown in Table S1 . bowtie2 -x Bat_coronavirus -f -a --score-min L,0,-0.6t -p 16 -S bat_corona_align.sam\" sars_meta_whole. fa",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 74,
                    "end": 82,
                    "text": "Table S1",
                    "ref_id": null
                }
            ],
            "section": "Read recruitment and assembly results for simulated SARS-Cov data"
        },
        {
            "text": "These are our recommended parameters for read mapping step.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "Commands for running tools on SARS simulated data set"
        },
        {
            "text": "(2) BWA Table S1 . Assembly results on SARS-CoV aligned and recruited metagenomic data. N50 is defined as the maximal length so that all contigs above this length contain at least 50% of all the contig bases. Genome coverage is the percentage of the five haplotypes' genomes being aligned by at least one contig. Mismatch rate is the percentage of mismatches between the aligned contigs and the references. ",
            "cite_spans": [],
            "ref_spans": [
                {
                    "start": 8,
                    "end": 16,
                    "text": "Table S1",
                    "ref_id": null
                }
            ],
            "section": "Commands for running tools on SARS simulated data set"
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "De novo haplotype reconstruction in viral quasispecies using paired-end read guided path finding",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "Chen",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Zhao",
                    "suffix": ""
                },
                {
                    "first": "Y",
                    "middle": [],
                    "last": "Sun",
                    "suffix": ""
                }
            ],
            "year": 2018,
            "venue": "Bioinformatics",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "Algorithms on strings, trees and sequences: computer science and computational biology",
            "authors": [
                {
                    "first": "D",
                    "middle": [],
                    "last": "Gusfield",
                    "suffix": ""
                }
            ],
            "year": 1997,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF2": {
            "ref_id": "b2",
            "title": "Simple linear work suffix array construction",
            "authors": [
                {
                    "first": "J",
                    "middle": [],
                    "last": "K\u00e4rkk\u00e4inen",
                    "suffix": ""
                },
                {
                    "first": "P",
                    "middle": [],
                    "last": "Sanders",
                    "suffix": ""
                }
            ],
            "year": 2003,
            "venue": "International Colloquium on Automata, Languages, and Programming",
            "volume": "",
            "issn": "",
            "pages": "943--955",
            "other_ids": {}
        },
        "BIBREF3": {
            "ref_id": "b3",
            "title": "Linear-time longest-common-prefix computation in suffix arrays and its applications",
            "authors": [
                {
                    "first": "T",
                    "middle": [],
                    "last": "Kasai",
                    "suffix": ""
                },
                {
                    "first": "G",
                    "middle": [],
                    "last": "Lee",
                    "suffix": ""
                },
                {
                    "first": "H",
                    "middle": [],
                    "last": "Arimura",
                    "suffix": ""
                },
                {
                    "first": "S",
                    "middle": [],
                    "last": "Arikawa",
                    "suffix": ""
                },
                {
                    "first": "K",
                    "middle": [],
                    "last": "Park",
                    "suffix": ""
                }
            ],
            "year": 2001,
            "venue": "Annual Symposium on Combinatorial Pattern Matching",
            "volume": "",
            "issn": "",
            "pages": "181--192",
            "other_ids": {}
        },
        "BIBREF4": {
            "ref_id": "b4",
            "title": "An elegant algorithm for the construction of suffix arrays",
            "authors": [
                {
                    "first": "S",
                    "middle": [],
                    "last": "Rajasekaran",
                    "suffix": ""
                },
                {
                    "first": "M",
                    "middle": [],
                    "last": "Nicolae",
                    "suffix": ""
                }
            ],
            "year": 2014,
            "venue": "Journal of Discrete Algorithms",
            "volume": "27",
            "issn": "",
            "pages": "21--28",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "FIGREF0": {
            "text": "Histogram of the LCS sizes between human viruses (A), between human viruses",
            "latex": null,
            "type": "figure"
        },
        "FIGREF1": {
            "text": "The ROC curve for LCS cutoff. The x-axis is the false positive rate (FPR). The y-axis is the true positive rate (TPR).",
            "latex": null,
            "type": "figure"
        },
        "FIGREF3": {
            "text": "False positive numbers and ture positive rates (TPR) for given LCS cutoffs. Thex-axis is the value of LCS cutoff. The double y axes represent the value of FP and TPR, respectively.",
            "latex": null,
            "type": "figure"
        },
        "FIGREF4": {
            "text": "Recruite reads with TAR-VIR's overlap extension component build -f sars_meta_whole.fa -o sars_meta overlap -S bat_corona_align.sam -x sars_meta -f sars_meta_whole.fa -c 150 -o sars_recruited.fa Assembly 1. TAR-VIR's assembly compont python pehaplo.py -f sars_meta_whole.fa -",
            "latex": null,
            "type": "figure"
        },
        "TABREF0": {
            "text": "For the suffix starting at SA[i], the LCP between SA[i] and SA[j] (j > i) is no less than the LCP between SA[i] and SA[k] if k > j. With this property and a user-defined LCS cutoff, the LCP calculation between SA[i] and all other suffixes after i can be calculated in constant time. The overall time complexity is O(N ).",
            "latex": null,
            "type": "table"
        },
        "TABREF1": {
            "text": "Input data: sars_meta_1.fa, sars_meta_2.fa or sars_meta_1.fq, sars_meta_2.fq or sars_meta_whole.fa Reference: Bat_coronavirus.fasta",
            "latex": null,
            "type": "table"
        },
        "TABREF2": {
            "text": "Overlap parameter used for FM-merge. This value must be no greater than the minimum # overlap value you wish to try for the assembly step. MOL=55 # Parameter for the small repeat resolution algorithm R=10 # The number of pairs required to link two contigs into a scaffold MIN_PAIRS=5 \"output\" -2019/2/12 -15:42 -page 4 -#4 a pipeline for TARgeted VIRal strain reconstruction from metagenomic data 4 # The minimum length of contigs to include in a scaffold MIN_LENGTH=350 # Turn off collapsing bubbles around indels MAX_GAP_DIFF=0 # First, preprocess the data to remove ambiguous basecalls $SGA_BIN preprocess -o virus.fa $IN # # Error correction # # Build the index that will be used for error correction # As the error corrector does not require the reverse BWT, suppress # construction of the reversed index $SGA_BIN index -a ropebwt -t $CPU --no-reverse virus.fa # Perform error correction with a 41-mer. # The k-mer cutoff parameter is learned automatically $SGA_BIN correct -k $CK --discard --learn -t $CPU -o reads.ec.k$CK.fa virus.fa # # Contig assembly # # Index the corrected data. $SGA_BIN index -a ropebwt -t $CPU reads.ec.k$CK.fa # Remove exact-match duplicates and reads with lowfrequency k-mers $SGA_BIN filter -x $COV_FILTER -k $FK -t $CPU -homopolymer-check --low-complexity-check reads.ec. k$CK.fa # Merge simple, unbranched chains of vertices $SGA_BIN fm-merge -m $MOL -t $CPU -o merged.k$CK.fa reads.ec.k$CK.filter.pass.fa # Build an index of the merged sequences $SGA_BIN index -t $CPU merged.k$CK.fa # Remove any substrings that were generated from the merge process $SGA_BIN rmdup -t $CPU merged.k$CK.fa # Compute the structure of the string graph $SGA_BIN overlap -m $OL -e $ER -t $CPU merged.k$CK. rmdup.fa # Perform the contig assembly without bubble popping $SGA_BIN assemble -m $OL -g $MAX_GAP_DIFF -r $R -o assemble.m$OL merged.k$CK.rmdup.asqg.gz 3. SPAdes metaspades.py --meta --only-assembler -k 105,115,125 -s sars_recruited.fa -o sars_meta_output/ 4. SAVAGE pear -f sars_meta_1.fq -r sars_meta_2.fq -o sars_meta_join savage --split 1 --min_overlap_len 120 -s singles.fastq -p1 paired1.fastq -p2 paired2.fastq -t 16 5. PRICE init_contig.fa: sars_meta_whole.fa reads aligned on Bat_coronavirus.fasta PriceTI -nc 5 -a 8 -fp sars_meta_1.fa sars_meta_2.fa 600 -icf init_contig.fa 3 3 1 -o price_results.fa",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": []
}