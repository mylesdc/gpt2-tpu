{
    "paper_id": "15029a39f0a27d1bbccb6fed1793ea25700d9e57",
    "metadata": {
        "title": "PLoS ONE: SEED Servers Supporting Information S1 SEED Servers: High-Performance Access to the SEED Genomes, Annotations, and Metabolic Models Supporting Information S1 Examples of programming using the SEED servers (coded in Perl) Example Code 1",
        "authors": []
    },
    "abstract": [],
    "body_text": [
        {
            "text": "use strict; 2.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "use SAPserver; 3.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "use Data::Dumper; 4. 5.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# Example 1: ACH Data for a Protein 6. # 7.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# This script takes a protein ID on the command line and 8.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# finds all identifiers in the Sapling database that correspond 9.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# to the identified protein (that is, they have the same amino 10.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# acid sequence). For each identifier found, the following six 11. # columns will be output. 12. # 13. # 1. The identifier found. 14.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# 2. The scientific name of the associated genome (if any # The data in columns (1), (4), (5), and (6) are provided 25.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# automatically by the Sapling Server method \"equiv_sequence\". 26.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# The item in column (3) is extracted via a call to the Sapling 27. # Server method \"genome_names\". The tricky part is the value in 28.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# column (3). To make this determination, we make an initial call 29.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# to the \"equiv_precise\" method to get identifiers for precisely-30.",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "# equivalent genes and put them into a hash. getopts('f:n:', \\%opts); 10 11 die <<EOF unless ($opts{f}); 12",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "$0 13 -f filename to get 14 -n number of proteins to parse at once. The default is 1,000 proteins 15 16 17",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "This is a program to retrieve essential seed data (role, subsystems, and subsystem classifications) about a set of proteins. To map into the seed we map based on the MD5 sum of the uppercase protein sequence (just the protein sequence alone, and without any identifiers or stop symbol). We can then move from those ids to subsystems and roles. 18 19",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "This code uses the seed servers, and you can find more information about them at http://servers.theseed.org/ You will need to install the seed servers before starting, but that should install all the commands you need. 20 21",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "Basically, we make remote calls that retrieve data, and the calls are designed so that we can retrieve a bolus of data and compute on it. In this case, you can set how many pieces of data to send/receive with the -n option. I suggest a relatively large number, like 1000, since the delay is typically in retrieving the data and not in sending the data over the internet. 22 23",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        },
        {
            "text": "This will print the results out, and so you may need to redirect the output. 13 30 # get the subsytem hierarchy. We only need this once, so getting it here will let us use it later 31 my $ssHash = $sap->all_subsystems(-usable => 1); 32 33 # counters and raw data",
            "cite_spans": [],
            "ref_spans": [],
            "section": "1."
        }
    ],
    "bib_entries": {
        "BIBREF0": {
            "ref_id": "b0",
            "title": "# recall that this is a one:many relationship 83 foreach my $tple (@{$subsysHash->{$fid}}) { 84 my ($role ,$ss)=@$tple",
            "authors": [],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        },
        "BIBREF1": {
            "ref_id": "b1",
            "title": "# in case the classification isn't defined, we'll make it null 86 if (!defined $ssHash->{$ss}) {$ssHash->{$ss}=",
            "authors": [],
            "year": null,
            "venue": "",
            "volume": "",
            "issn": "",
            "pages": "",
            "other_ids": {}
        }
    },
    "ref_entries": {
        "TABREF1": {
            "text": "URL: http://servers.theseed.org/sapling/server.cgi?code=server_paper_example5.pl URL: http://servers.theseed.org/sapling/server.cgi?code=server_paper_example6.pl URL: http://servers.theseed.org/sapling/server.cgi?code=server_paper_example7.pl go = join(\"; \", grep {m/^GO/} @{$rec->{'DR'}}); 50 $rec->{'ID'}->[0] =~ m/^\\s*(\\S+)\\s/; (ii) map_uniprot_to_seed.pl URL: http://edwards-sdsu.cvs.sourceforge.net/viewvc/edwards-sdsu/bioinformatics/bin/map_uniprot_to_seed.pl?view=log",
            "latex": null,
            "type": "table"
        }
    },
    "back_matter": []
}