Building of the medieval trading and pilgrimage network. Several main commercial confederations were active during Late Middle Ages. One of the most active one was the Silk Road, a trading and cultural network spanning along the Asian continent and connecting the Far East and the Mediterranean Sea. In the southern part of Europe there were two trade routes connecting by sea and land Genoa and Venetia with many other cities in the Mediterranean, Northern Africa, Near East, Asia and central Europe. In northern Europe the Hanseatic League connected many ports around the Baltic Sea with cities from North and North--East Europe. Some other minor commercial routes like English Wool Market, Spanish Wine Market or North--African Slave trades were also present at that time. Besides these trading routes, Europe also held some important pilgrimage routes, outstanding the Way of St. James, which connected Santiago de Compostela in Spain with many places in Central and Western Europe, the Via Francigena, which run from Rome to France, although reached places as far as Canterbury in England and the North--African Islamic routes that connected muslim cities with La Mecca in the Arabian Peninsula. To build the medieval trading and pilgrimage networks, we obtained the medieval routes from the Old World Trade Routes Project, OWTRAD 34 . This project provides electronic archives of geo/chrono--referenced data on terrestrial and maritime trade and pilgrimage and trade routes of Eurasia and Africa from 4000 BCE to 1800 CE. We selected those files describing the routes during the XII and XIII centuries CE. In total, we found 22 files with information about routes working during the Black Death period (Supplementary Table S5 online) Using this information, we built up a network that connected Eurasian and African medieval cities sharing trading or pilgrimage routes. This network was built by pooling the information from the 22 files. Because the traffic may occurs in both directions, our network was undirected. Some pair of cities were connected both by trading and pilgrimage routes. However, because information on traffic density is unavailable for the fourteenth century, the original network was unweighted and all connections between pair of cities had the same value = 1. Nevertheless, in order to explore whether trading and pilgrimage activities differed in their effect on plague--mediated mortality, we divided this overall network into two networks, one including only trading links (trading network, hereafter) and the other including only pilgrimage connections (pilgrimage network). For this, we followed the classification of the routes made by the OWTRAD project 34 .
significant, we first made 100 random networks with the same size and density. In addition, we also made reshuffled networks with the same size and density as our empirical networks, maintaining the same degree of each of the nodes but reshuffling randomly the links among them. We did 100 reshuffling per network instance. In both cases we calculated the mean and 95% confidence interval of the transitivity values for this set of random networks 3 .
Local transitivity measures the probability that neighboring cities of a focal city are also connected among them by direct routes. It was calculated by the local clustering coefficient, estimated as the ratio of the number of pairs of neighbors of a given node that are connected to the number of pairs of neighbors of that node 3 :
where R(i) is the mean number of connections from a neighbour of node i to other neighbors of node i, and k(i) is the degree of the node i 3 . These analyses were computed with the R packages igraph 38 and tnet 44 .
Centrality Indices. The importance of a node within a network is quantified by its centrality 3, 18, 39 .
Centrality indicates how well connected is a given city with the rest of the cities owing to shared routes.
The centrality of the cities in the network was calculated by means of a local (degree) and a global (closeness) index 3, 18, 39, 40 . Each of these metrics captures different and complementary aspects of centrality.
Degree centrality can be defined as the number of links incident upon a node 40 . In epidemic networks, degree centrality appropriately measures short--term vulnerability of nodes to infection because it indicates the proportion of times that the node is visited by the flow process in the network 22 . Degree centrality is the number of connected nodes to a given node, or number of adjacent nodes 3 . It can be formalised as:
where w is the weighted adjacency matrix, in which w ij is greater than 0 if the node i is connected to node j, and the value represents the weight of the edge. This is equal to the definition of degree if the network is binary, i.e. each edge has a weight of 1.
Closeness is the sum of the graph--distances from one node to all other nodes in the network 3 .
Closeness defines the flow pathways, which has been shown to be important in infection spreading and can be interpreted as the expected time until arrival to a given node of something flowing through the network 12, 40 . It assesses the importance of a node based on its reachability within a network. Closeness centrality is the inverse sum of shortest distances to all other nodes from a focal node, and describes how close is a given node from the rest of the nodes in the network. Dijkstra's 41 algorithm finds the path of least resistance, defined for networks where weights represented costs of transmitting. Newman 42 and Brandes 43 inverted the edge weights to indicate that the weight of an edge between two nodes is directly proportional to the ease of flow between nodes. According to this idea, the distance between two nodes i and j is:
Using this computation of the distance between two given nodes, weighted closeness centrality is computed as:
(1
In general, degrees assess the importance of a node based on its reachability within a network. This measure provides a description of network connectivity based on the individual components. Closeness defines the flow pathways, which has been shown to be important in infection spreading. Nodes with high values of these metric act as bridges, connecting one part of a network to another that would otherwise be sparsely or not connected at all, favouring the spreading of disease across the entire network 3 . Centrality indices were computed with the R packages igraph 38 and tnet 44 .
Calculation of the mortality rate due to the plague. The number of people dying to the plague was recorded using Benedictow 2 , Horrox 35 and Sistach 36 . In addition, we systematically searched for extra information on mortality. For this, we carried out computer searches in Google Scholar and SCOPUS including the words "Black Death", "plague", "mortality", "survival", and "death". We only retrieved the information referring to the Black Death epidemics. When more than one value was found in a given city, we retained the most modern one or that having more support by historians.
Calculation of the spatio--temporal correlation in mortality rate. To check the existence of spatial and temporal dynamics in mortality rates in our network, we obtained the spatial location of each city and the time of arrival of the plague to each city using the information provided by BÃ¼ntgen et al. 37 and
Spatio--temporal autocorrelation was checked by performing Mantel tests between the across-cities distances in mortality rate and the spatial and temporal distances. In these analyses, we used the Euclidean distance in mortality rates. The temporal distance matrix was calculated as the difference among cities in the year of the plague's arrival. Geographic distances can be calculated using several measures. Travelling distances can be a realistic estimate of the distance between two cities but, unfortunately, there is not accurate information about these measures in the medieval network and therefore we used geodesic distance between cities as a proxy. The Mantel tests were performed with the R package vegan 45 .
Spatially--explicit generalised linear models. The relationship between centrality and mortality rate during the Black Death pandemic was explored by fitting spatially--explicit generalised linear models. The dependent variable was mortality rate estimated as the proportion of the population dying due to the plague in each city. We performed five models, one including as independent variables the local transitivity values of the cities, and the remaining models including each of the centrality metrics (degree and closeness), respectively. We repeated these analyses for the three networks considered here, the overall network, the trade network and the pilgrimage network. To control for the time of arrival of the epidemics to the cities, we included this variable as covariate in all analyses. All explanatory variables except time of arrival were log--transformed.
In addition, we generated random networks with the same size (number of nodes) and number of links than the three studied networks (overall, trade and pilgrimage) using the Erdos--Renyi G(n,m)
model. According to this model, the random network is chosen uniformly at random from a set of network having n nodes and m links. We then calculated for each city their centrality and transitivity in these random networks. Using the spatially--explicit generalised linear models, we checked whether the relationship between the network attributes of the cities and the mortality rate due to the plague maintain in these random networks.
All the statistical analyses were performed using the R packages igraph 38 and nlme 46 .
Simulating the effect of centrality and transitivity on the probability of multiple infections. We simulated the diffusion of plague throughout our medieval network by using a susceptible--infectious-susceptible (SIS) epidemic model. This model describes how individuals change from susceptible to infected. This model is described by two standard sets of differential equations:
where S and I refer to the number of susceptible and infectious individuals, respectively, in a population of size N, g is the rate of recovery from infection, and Î» is the rate at which susceptible individuals become infected. Individuals in our simulations were the cities, and the population was the entire set of cities connected through trading and pilgrimage routes (N = 1311 cities). Because a city can be repeatedly infected without recovering from the diseases, we simplified the above equations by considering g = 0. We did this simplification because a city usually contains both infected and susceptible individuals. If this occurs, the city is considered to be infected although some individuals are susceptible. Under a scenario of re--infection, susceptible individuals can be infected before the recovery of the other individuals in the city. Nevertheless, it would be convenient in the future to test the response of the model to more complex scenarios, like for example, modelling the proportion of the population that is infected within cities. According to this model, every individual from the population will be eventually infected. In addition, in a closed population without birth, death and migration, and mixing at random, all individuals have the same probability of becoming infected. Under these circumstances, the rate of infection can be calculated as:
where Î² is the transmission rate (the probability of the disease to infect a susceptible city when contacting with an infected city), ! is the effective number of contacts per unit time and I/N is the proportion of infected contacts. The SIS models, by considering random mixing, assume that each city has a small and equal chance of contacting with any other city in the population. So, ! is equal to 1, and this equation becomes:
Our goal was to model how the plague moved among medieval cities following the trading and pilgrimage network. This means that the assumption of random mixing is not fulfilled. Rather, the transmission of the diseases is given by the contact network among cities. The probability of a city of becoming infected depends thus on the number of infected cities contacting with the focal city multiplied by the transmission rate of the disease. We included this constraint in our modelling approach by considering as contact network the empirical medieval network depicting trade and pilgrimage routes. Using SI epidemic models, we simulated the spreading of the Black Death along the medieval network. Because no accurate information exists on the transmission rate of the Black Death, we repeated the diffusion of the disease in several infectivity scenarios ranging between transmission rate of 0.05 (very low infectivity rate) to 0.95 (very high infectivity rate). We did 1000 simulations for each infectivity scenario. The epidemic was started in all simulations from central Asian cities. We obtained the number of times a given city was infected during each simulation. Afterward, using the same statistical models explained in the previous section, we tested whether the number of infections was related to the centrality and transitivity of the cities. The script used to make the simulations is provided in SI Dataset. ############################################################################# ############ Drawing a spatial network of European trade ############ ############################################################################# require(sp); require (maps); require(maptools); require(mapdata); require (scales); require (igraph); require (tnet) cities<--read.table ("Data.OWTRAD.cities.txt", header =T, row.names=1) OWTRAD=read.csv("Data.OWTRAD.Edgelist.txt", header =TRUE) OWTRAD =as.matrix(OWTRAD) #igraph needs the edgelist to be in matrix format g=graph.edgelist(OWTRAD[,1:2], directed=FALSE) E(g)$weight=as.numeric(OWTRAD[,3]) E(g)$type.of.route=as.factor(OWTRAD[,4]) #### Ordering g and spatial.city to assign right spatial coordinates City<--V(g)$name City<--data.frame(City) cities.ordered<--cities[City$City,] #cities.ordered$Arrival<--as.factor(cities.ordered$Arrival) # to associate spatial coordinates as vertex attributes V(g)$lat<--cities.ordered$y V(g)$lon<--cities.ordered$x gV <--SpatialPoints(cbind(V(g)$lon, V(g)$lat)) #writePointsShape(gV, fn="vertices") # Create the SpatialLinesDataFrame object for the edges. #Needs numeric edgelist in Pajek format #write.graph(g, file="Data.OWTRAD.Edgelist.num.txt", format="pajek") OWTRAD.num=read.csv("Data.OWTRAD.Edgelist.num.txt", header =TRUE) OWTRAD.num =as.matrix(OWTRAD.num) #igraph needs the edgelist to be in matrix format g.num=graph.edgelist(OWTRAD.num[,1:2], directed=FALSE) E(g.num)$weight=as.numeric(OWTRAD.num[,3]) #E(g.num)$trade=as.factor(OWTRAD.num[,4]) edges <--get.edgelist(g.num) edges <--cbind(edgeNum=1:nrow(edges), city1=edges[,1], city2=edges[,2]) ## Create SpatialLinesDataFrame object describing edges gE <--apply(edges, 1, function(i) Lines(Line(cbind(c(V(g)$lon[i["city1"]], V(g)$lon[i["city2"]]), c(V(g)$lat[i["city1"]], V(g)$lat[i["city2"]]))), ID=as.character(i["edgeNum"]))) gE <--SpatialLinesDataFrame(SpatialLines(gE), data=data.frame(edgeNum=1:nrow(edges))) ## Write edges to a shapefile #writeLinesShape(gE, fn="edges") #Drawing the spatially--explicit network map (xlim=c (--30, 150) , ylim=c(0, 70), col="gray90", fill=TRUE) box() map.axes() map.scale(x=--29, y=2, ratio=FALSE, relwidth=0.2) lines(gE, col ="blue") points(gV, pch=21, cex=1+cities.ordered$degree/3, xlab="longitude", ylab="latitude", col= "black", bg=111) points(gV, pch=21, cex=1+cities.ordered$Prin1/2, xlab="longitude", ylab="latitude", col= "black", bg= c("gray", "blue", "red", "yellow", "darkviolet", "green", "magenta", "black") [ 
"]]))), ID=as.character(i["edgeNum"]))) gE.courier <--SpatialLinesDataFrame(SpatialLines(gE.courier), data=data.frame(edgeNum=1:nrow(edges.courier))) writeLinesShape(gE.courier, fn="edges") map (xlim=c (--20, 130) , ylim=c(0, 65), col="grey", fill=TRUE) #box() #map.axes() map.scale(x=--29, y=2, ratio=FALSE, relwidth=0.2) lines(gE.trade, col ="blue") lines(gE.pilgrim, col ="white") lines(gE.courier, col ="blue") points(gV, pch=21, cex=1+cities.ordered$degree/8, xlab="longitude", ylab="latitude", col= "blue", bg="blue") ############################################################################# ############ Modelling diffusion process in medieval networks in R ############ ############################################################################# require(networkdiffusion); require(igraph); require(network); require(nlme) # Generate a contact network using the medieval network OWTRAD=read.csv("Data.OWTRAD.Edgelist.noduplicados.txt", header =TRUE) # read the file OWTRAD=as.matrix(OWTRAD) #igraph needs the edgelist to be in matrix format g=graph.edgelist(OWTRAD[,0:2], directed=FALSE) E(g)$weight=as.numeric(OWTRAD[,4]) # Loading city datasets with centrality and transitivity values cities<--read.table ("Data.OWTRAD.cities.2.txt", sep=",", header=TRUE) # We used the small dataset with few columns # Model parameters transmission.rate = c(0. 05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95) # M starting.nodes=c(477,547,676,677,678,679,680,681,682,689,742,766,767,769,770,807,808,81 3,814,909,965,987,988,989,1009,1023,1028,1029,1034,1075,1093,1105,1161,1167,1206,120 7,1234,1235,1278) ])) total_time = total_time + 1 } # Outcomes files--Files with multiple infections infected[length(infected)]--> final.infected final.infected <--as.data.frame(final.infected) names(final.infected)<--paste("nodes") final.infected$no_infections<--1 multiple.infection<--aggregate(final.infected$no_infections, by= list(nodes=final.infected$nodes), FUN=sum) names(multiple.infection)[2]<--paste("no_infections") # Outcome files--Files with city names v<--get.data.frame(g, what="vertices") nodes<--1:1311 v$nodes<--nodes names(v)[1]<--paste("city") temporal.file<--merge(v, multiple.infection, by="nodes", all=TRUE) temporal.file[is.na(temporal.file)]<--0 merge(cities, temporal.file, by="city", all=TRUE)-->vb # Testing the effect of centrality and transitivity on re--infection gauss.mod.degree<--gls(no_infections~log(degree), data= vb) gauss.mod.degree<--update(mod.degree,corr=corGaus(form=~x+y)) gauss.mod.closeness<--gls(no_infections log(closeness+1), data= vb) gauss.mod.closeness<--update(mod.closeness,corr=corGaus(form=~x+y)) gauss.mod.transitivity<--gls(no_infections log(transitivity.overall+1), na.action=na.omit, data= vb) gauss.mod.transitivity<--update(mod.transitivity,corr=corGaus(form=~x+y)) } FIGURES Figure S1 . Degree distribution. It is shown the cumulative distribution of number of links per node (k, degree). Table S3 . Outcome of the Pearson correlation between closeness centrality and the local clustering coefficient for each type of network (overall, trade and pilgrimage networks). It is also shown the mean and the 95 % confidence interval of the correlations in null networks made by reshuffling the links randomly across nodes but maintaining their degree. 